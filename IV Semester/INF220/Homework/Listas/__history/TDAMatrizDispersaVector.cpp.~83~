//---------------------------------------------------------------------------

#pragma hdrstop

#include "TDAMatrizDispersaVector.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)


void TDAMatrizDispersaVector::crear()
{
    df = 0;
    dc = 0;
    repe = 0;
    nt=0;
}

void TDAMatrizDispersaVector::definir_valor_repetido(int e)
{
    if(nt==0)
    {
        repe = e;
    }else
    {
        bool x = false;
        for(int i=1;i<=nt;++i)
        {
            if(vd[i]==e)
             x=true;
             break;
        }
        if(x==false)
        {
            repe = e;
        }
    }
}

void Actualizar(int v[],int i,int n)
{
    i++;
    while(i<=n+1)
    {
       v[i]++;
       ++i;
    }
}


void TDAMatrizDispersaVector::ponerComprimido(int f,int c,int e)
{
   if(e!=repe)
   {
   // No hay nada y queremos insertar
   if(nt==0)
   {
       for(int i=1;i<=df+1;++i)vf[i]=1;
       vc[1]=c;
       vd[1]=e;
       Actualizar(vf,f,df);
       nt++;
   }else
   {
       int i = vf[f];
       int j = nt+1;
       while(j>i)
       {
           vc[j]=vc[j-1];
           vd[j]=vd[j-1];
           j--;
       }
       vc[i]=c;
       vd[i]=e;
       Actualizar(vf,f,df);
       nt++;
   }

   for(int i=1;i<=nt;++i)
   {
       std::cout<<vd[i]<<" ";
   }std::cout<<std::endl;
      for(int i=1;i<=nt;++i)
   {
       std::cout<<vc[i]<<" ";
   }std::cout<<std::endl;
      for(int i=1;i<=df+1;++i)
   {
       std::cout<<vf[i]<<" ";
   }std::cout<<std::endl;


   }
}


int TDAMatrizDispersaVector::elementoComprimido(int f,int c)
{
   bool existe = false;
   int i = vf[f];
   int top = i + vf[f+1]-vf[f] ;

   while(i<top)
   {
       if(vc[i]==c)
        existe = true;
        break;
       i++;
   }

   if(existe)
   {
       return vd[i];
   }else
   {
       return repe;
   }

}

void TDAMatrizDispersaVector::poner(int f,int c,int e)
{
    int lug=0;
    for(int i=1;i<=nt;++i)
    {
         if(vf[i]==f && vc[i]==c)
         {
             lug = i;
             break;
         }
    }
    if(lug>0)
    {
        vd[lug]=e;
    }else
    if(nt<max)
    {
        nt++;
        vd[nt]=e;
        vf[nt]=f;
        vc[nt]=c;
    }else
    {
        //Error
    }
}

void   TDAMatrizDispersaVector::dimensionar(int f,int c)
{
    df = f;
    dc = c;
}


int TDAMatrizDispersaVector::elemento(int f,int  c)
{
    if((f>=1 && f<= df) && ( c>=1 && c<=dc))
    {
       int lug=0;
    for(int i=1;i<=nt;++i)
    {
         if(vf[i]==f && vc[i]==c)
         {
             lug = i;
             break;
         }
    }
     if(lug>0)
     {
        return vd[lug];
     }else
     {
         return repe;
     }
    }
}

int TDAMatrizDispersaVector::dimension_fila()
{
    return df;
}

int TDAMatrizDispersaVector::dimension_columna()
{
    return dc;
}
