//---------------------------------------------------------------------------

#pragma hdrstop

#include "TDAListaMemoria.h"
#include <iostream>
//---------------------------------------------------------------------------
#pragma package(smart_init)


TDAListaMemoria::TDAListaMemoria()
{
	Longitud = 0;
    PtrElementos = 1;

}

bool TDAListaMemoria::vacia()
{
    return (Longitud==0);

}

int TDAListaMemoria::longitud()
{
	return Longitud;
}



int TDAListaMemoria::primero()
{
	if(!vacia())
	{
		return PtrElementos;
	}else
	{
		throw("Lista Vacia...");
	}
}

int TDAListaMemoria::fin()
{
    int PtrFin;
	if(vacia())
	{
		throw("Esta Vacia");
	}else
	{
		int x = PtrElementos;

		while(x!=NULO)
		{
			 PtrFin = x;
			 x = m.obtener_dato(x,2);
		}

        return PtrFin;
    }
}

int TDAListaMemoria::anterior(int direccion)
{
	if(vacia())
	{

	}else
	{
		if(direccion==primero())
		{

		}else
		{
			int x = PtrElementos;
			int ant = NULO;
			while(x!=NULO)
			{
				if(x==direccion)
				{
					return ant;
				}
				ant = x;
				x = m.obtener_dato(x,2);
            }
        }
    }
}

int TDAListaMemoria::recupera(int direccion)
{
	if(vacia())
	{

	}else
	{
        return m.obtener_dato(direccion,1);
    }
}

void TDAListaMemoria::modifica(int direccion,int elemento)
{
	if(vacia())
	{

	}
    m.poner_dato(direccion,1,elemento);
}

void TDAListaMemoria::inserta(int direccion, int elemento)
{
	int x = m.new_espacio(2);
	if(x!=NULO)
	{
		m.poner_dato(x,1,elemento);
		m.poner_dato(x,2,NULO);

		if(vacia())
		{
			PtrElementos = x;
			Longitud = 1;
		}else
		{
			Longitud++;
			if(direccion==primero())
			{
				m.poner_dato(x,2,direccion);
				PtrElementos = x;
			}else
			{
				int ant = anterior(direccion);
				m.poner_dato(ant,2,x);
				m.poner_dato(x,2,direccion);
			}
		}
	}

}

int TDAListaMemoria::siguiente(int direccion)
{
	if(vacia())
	{

	}else
	{
		if(direccion==fin())
		{

		}else
		{
			return m.obtener_dato(direccion,2);
		}
	}

}

void TDAListaMemoria::mostrar()
{
    m.mostrar();
	for(int i=1;i<=Longitud;++i)
	{
		std::cout<< recupera(i)<<" ";
	}
	std::cout<<::std::endl;

}